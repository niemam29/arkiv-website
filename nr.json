[
  {
    "id": "1a2b3c4d5e6f7a8b",
    "type": "tab",
    "label": "Dog Feeder",
    "disabled": false,
    "info": ""
  },
  {
    "id": "reset_morning",
    "type": "inject",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Reset 08:00",
    "props": [
      {
        "p": "window",
        "v": "morning",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "0 8 * * *",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "x": 160,
    "y": 220,
    "wires": [["reset_counter"]]
  },
  {
    "id": "reset_midday",
    "type": "inject",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Reset 12:00",
    "props": [
      {
        "p": "window",
        "v": "afternoon",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "0 12 * * *",
    "once": false,
    "onceDelay": "1",
    "topic": "",
    "x": 160,
    "y": 260,
    "wires": [["reset_counter"]]
  },
  {
    "id": "reset_evening",
    "type": "inject",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Reset 17:00",
    "props": [
      {
        "p": "window",
        "v": "evening",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "0 17 * * *",
    "once": false,
    "onceDelay": "1",
    "topic": "",
    "x": 160,
    "y": 300,
    "wires": [["reset_counter"]]
  },
  {
    "id": "reset_counter",
    "type": "function",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Reset window counter",
    "func": "const windowKey = msg.window;\nconst labels = { morning: \"08-12\", afternoon: \"12-17\", evening: \"17-22\" };\nif (!windowKey || !labels[windowKey]) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Unknown window\" });\n    return null;\n}\nflow.set(\"window_\" + windowKey + \"_used\", 0);\nnode.status({ fill: \"blue\", shape: \"dot\", text: labels[windowKey] + \" reset\" });\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 430,
    "y": 260,
    "wires": []
  },
  {
    "id": "set_portion_inject",
    "type": "inject",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Set portion 8 g",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.5",
    "topic": "",
    "payload": "8",
    "payloadType": "num",
    "x": 150,
    "y": 120,
    "wires": [["set_portion_func"]]
  },
  {
    "id": "set_portion_func",
    "type": "function",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Store portion size",
    "func": "const portion = Number(msg.payload);\nif (Number.isNaN(portion) || portion <= 0) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Invalid portion\" });\n    return null;\n}\nflow.set('portion_size', portion);\nnode.status({ fill: \"green\", shape: \"dot\", text: `Portion ${portion} g` });\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 120,
    "wires": []
  },
  {
    "id": "feeder_sensor",
    "type": "server-state-changed",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Bowl almost empty",
    "server": "homeassistant",
    "version": 5,
    "exposeToHomeAssistant": false,
    "haConfig": [
      {
        "property": "name",
        "value": ""
      },
      {
        "property": "icon",
        "value": ""
      }
    ],
    "entityidfilter": "sensor.xiaomi_iv2001_2984_eaten_food_measure_7",
    "entityidfiltertype": "exact",
    "outputinitially": false,
    "state_type": "num",
    "haltifstate": "4",
    "halt_if_type": "num",
    "halt_if_compare": "lt",
    "outputs": 1,
    "output_only_on_state_change": true,
    "for": "120",
    "forType": "num",
    "forUnits": "seconds",
    "ignorePrevStateNull": true,
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
      },
      {
        "property": "data",
        "propertyType": "msg",
        "value": "",
        "valueType": "entity"
      }
    ],
    "x": 190,
    "y": 180,
    "wires": [["decide_feed_func"]]
  },
  {
    "id": "decide_feed_func",
    "type": "function",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Decide feeding",
    "func": "const portion = Number(flow.get('portion_size') ?? 8);\nconst threshold = 4;\nconst rawValue = Number(msg.payload);\nif (Number.isNaN(rawValue)) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"No reading\" });\n    return null;\n}\nif (rawValue >= threshold) {\n    node.status({ fill: \"grey\", shape: \"dot\", text: `Bowl has ${rawValue} g` });\n    return null;\n}\nconst now = new Date();\nconst minutes = now.getHours() * 60 + now.getMinutes();\nconst windows = [\n    { key: 'morning', label: '08-12', start: 480, end: 720, max: 24 },\n    { key: 'afternoon', label: '12-17', start: 720, end: 1020, max: 24 },\n    { key: 'evening', label: '17-22', start: 1020, end: 1320, max: 40 }\n];\nconst active = windows.find(w => minutes >= w.start && minutes < w.end);\nif (!active) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"Outside window\" });\n    return null;\n}\nconst usedKey = `window_${active.key}_used`;\nconst used = Number(flow.get(usedKey) ?? 0);\nconst lastFeed = Number(flow.get('last_feed_ts') ?? 0);\nif (Date.now() - lastFeed < 10 * 60 * 1000) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"Fed less than 10 min ago\" });\n    return null;\n}\nif (used + portion > active.max) {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: `${active.label} limit ${used}/${active.max} g` });\n    return null;\n}\nflow.set(usedKey, used + portion);\nflow.set('last_feed_ts', Date.now());\nmsg.payload = {\n    window: active.key,\n    label: active.label,\n    portion,\n    total_used: used + portion,\n    limit: active.max,\n    time: now.toISOString()\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `${active.label}: +${portion} g (${used + portion}/${active.max})` });\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 430,
    "y": 180,
    "wires": [["call_feed_button", "feed_debug"]]
  },
  {
    "id": "call_feed_button",
    "type": "api-call-service",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Dispense portion",
    "server": "homeassistant",
    "version": 5,
    "debugenabled": false,
    "service_domain": "button",
    "service": "press",
    "entityId": "",
    "data": "{\"entity_id\":\"button.xiaomi_iv2001_2984_pet_food_out_2\"}",
    "dataType": "json",
    "mergecontext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 710,
    "y": 160,
    "wires": [[]]
  },
  {
    "id": "feed_debug",
    "type": "debug",
    "z": "1a2b3c4d5e6f7a8b",
    "name": "Feeding log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 720,
    "y": 210,
    "wires": []
  }
]
